/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2025 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    id 'base'
    id 'build-dashboard'
    id 'java-platform'
    id 'com.diffplug.spotless' version '8.0.0'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'com.github.spotbugs' version '6.4.3' apply false
    id 'com.google.osdetector' version '1.7.3'
    id 'com.netflix.nebula.info' version '14.0.0' apply false
    id 'com.netflix.nebula.maven-base-publish' version '22.0.0' apply false
    id 'net.ltgt.errorprone' version '4.3.0' apply false
    id 'org.sonarqube' version '7.0.0.6105'
    id 'com.autonomousapps.dependency-analysis' version '3.1.0'
}

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    javaFxPlatform = osdetector.arch == 'aarch_64' ? javaFxPlatform + '-aarch64' : javaFxPlatform
}

javaPlatform {
    allowDependencies()
}

dependencies {
    api platform('org.junit:junit-bom:6.0.0')
    api platform('org.apache.logging.log4j:log4j-bom:2.25.2')
    api platform('org.glassfish.jersey:jersey-bom:3.1.11')

    constraints {
        api 'biz.aQute.bnd:biz.aQute.bnd.annotation:7.1.0'
        api 'com.github.spotbugs:spotbugs-annotations:4.9.7'
        api 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'
        api 'org.eclipse:yasson:3.0.4'
        api 'org.ehcache:ehcache:3.11.1'
        api 'org.simplify4u:slf4j2-mock:2.4.0'
        api 'org.slf4j:slf4j-api:2.0.17'
    }
}

allprojects {
    int[] versionSplit = currentVersion.split('[.]').collect{it as int}
    assert 3 == versionSplit.length : 'currentVersion property requires all three version parts (major, minor, patch)'

    group = mavenGroupName
    version = String.format('release' == System.getenv('GITHUB_REF_NAME') ? '%d.%d.%d' : '%d.%d-SNAPSHOT', versionSplit)
    description = "${projectDescriptionBase} (${name})"

    repositories {
        mavenCentral()
    }

    // configuring Spotless
    apply plugin: 'com.diffplug.spotless'

    afterEvaluate {
        spotless {
            if (!System.env.CI) {
                // https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
                // only format files which have changed since this ref
                // TODO: Figure out a way to get this working in CI (i.e. Github Workflows)
                ratchetFrom 'origin/master'
            }

            format 'textBasedFiles', {
                target(
                    '*.gradle',
                    '**/*.gradle',
                    '**/*.asciidoc',
                    '**/*.adoc',
                    '**/*.asc',
                    '**/*.css',
                    '**/*.json',
                    '**/*.md',
                    '**/*.properties',
                    '.gitignore',
                )
                targetExclude(
                    '.*/**',
                )

                trimTrailingWhitespace()
                leadingTabsToSpaces(4)
                endWithNewline()
                replaceRegex 'noMultipleEmptyLines', '\n{3,}', '\n\n'
            }

            def closure = {
                trimTrailingWhitespace()
                leadingTabsToSpaces(4)
                endWithNewline()
//                importOrder(
//                    '\\#',    // static imports
//                    'com',   // classes from com root package
//                    'java',   // classes from java root package
//                    'javafx',  // classes from javafx root package
//                    'javax',  // classes from javax root package
//                    'jakarta',  // classes from javax root package
//                    'org',  // classes from org root package
//                    '',       // any other import
//                )
                replaceRegex 'noStarImports', /\nimport (static )?[a-zA-Z0-9.]*[.][\*];\n/, '\n'
                replaceRegex 'noMultipleEmptyLines', '\n{3,}', '\n\n'
                replaceRegex 'Remove @author javadoc taglets.', '\n\\s*\\*\\s*@author.*', ''
                replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
                replaceRegex 'Remove empty javadoc', '\n\\s*/\\*\\*\n\\s*\\*/\n', '\n\n'
                replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
                licenseHeaderFile rootProject.file('LICENSE.spotlessJavaTemplate')
            }

            if (plugins.hasPlugin(JavaPlugin)) {
                java(closure)
            }
        }

        tasks.named('check') {
            dependsOn spotlessCheck
        }
    }

    // configuring dependencyAnalysis
    plugins.withType(com.autonomousapps.DependencyAnalysisPlugin) {
        if (rootProject == project) {
            dependencyAnalysis {
                issues {
                    all { // applies to all projects
                        onUsedTransitiveDependencies {
                            severity 'ignore'
                        }
                        onUnusedDependencies {
                            severity 'warn' // default
                        }
                        onRedundantPlugins {
                            severity 'fail'
                        }
                    }
                }
            }

            afterEvaluate {
                tasks.named('buildHealth').configure {
                    printBuildHealth = true
                }
            }
        }
    }

    // now configuring for projects that contain code not just structuring the project
    if (childProjects.isEmpty()) {
        // configuring standard java project
        apply plugin: 'java-library'
        apply plugin: 'idea'
        apply plugin: 'jacoco'
        apply plugin: 'eclipse'
        apply plugin: 'com.netflix.nebula.info'
        apply plugin: 'maven-publish'
        apply plugin: 'com.autonomousapps.dependency-analysis'

        java {
            withJavadocJar()
            withSourcesJar()
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(Integer.parseInt(System.getenv('JAVA_PLATFORM_VERSION') ?: '25')))
            }
        }

        configurations {
            javafx {
                description = 'Java FX libraries'
            }
            jaxb {
                description = 'JAXB libraries'
            }

            /*
            all {
                resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'org.ow2.asm' &&
                        details.requested.name == 'asm') {
                        details.useVersion '9.5'
                        details.because 'workaround for spotbugs not yet supporting JDK 21 class formats'
                    }
                }
            }
            */

            compileOnly {
                extendsFrom configurations.javafx
            }

            testFramework {
                description = 'Libraries for testing'
                // exclude old junit api
                exclude group: 'junit'
            }
            testImplementation.extendsFrom testFramework
        }

        dependencies {
            // get recommended versions from the platform project
            api platform(rootProject)

            javafx 'org.openjfx:javafx-base:25:' + javaFxPlatform
            javafx 'org.openjfx:javafx-graphics:25:' + javaFxPlatform
            javafx 'org.openjfx:javafx-fxml:25:' + javaFxPlatform
            javafx 'org.openjfx:javafx-controls:25:' + javaFxPlatform

            jaxb 'jakarta.activation:jakarta.activation-api:2.1.4'
            jaxb 'org.eclipse.angus:angus-activation:2.0.3'
            jaxb 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4'
            jaxb 'org.glassfish.jaxb:jaxb-runtime:4.0.6'

            testFramework 'org.assertj:assertj-core:3.27.6'
            testFramework 'org.junit.jupiter:junit-jupiter-api'
            testFramework 'org.junit.jupiter:junit-jupiter-params'
            testFramework 'org.mockito:mockito-junit-jupiter:5.20.0'

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
            testRuntimeOnly 'org.mockito:mockito-inline:5.2.0'
        }

        ext {
            getJvmModulePath = { -> (configurations.javafx + configurations.jaxb).asPath}
            getJvmAdditionalModules = { ->
                [
                    'jakarta.activation',
                    'jakarta.xml.bind',
                    'javafx.controls',
                    'javafx.fxml',
                    'javafx.graphics',
                ].toUnique().toSorted().join(',')
            }
        }

        tasks.named('jar') {
            manifest.attributes provider: 'gradle'
        }

        tasks.named('javadoc') {
            options.addStringOption('-module-path', getJvmModulePath())
            options.addStringOption('-add-modules', getJvmAdditionalModules())
            enabled = false // TODO: re-enable (currently breaks build with ClassCastException)
        }

        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs.addAll([
                    // lint everything except preview (as using preview features would generate a warning and thus break the build)
                    '-Xlint:all,-preview',
                    '--enable-preview',
                    '-Werror',
                    '-proc:none',
                    '--module-path',
                    getJvmModulePath(),
                    '--add-modules',
                    getJvmAdditionalModules(),
            ])
        }

        tasks.withType(JavaExec).configureEach {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
            jvmArgs '--add-opens'
            jvmArgs 'java.base/jdk.internal.misc=ALL-UNNAMED'
        }

        tasks.withType(Test).configureEach {
            jvmArgs '--enable-preview'
            jvmArgs '--module-path'
            jvmArgs getJvmModulePath()
            jvmArgs '--add-modules'
            jvmArgs getJvmAdditionalModules()
            systemProperty 'org.tweetwallfx.tests.executeConferenceClientLiveTests', executeConferenceClientLiveTests

            useJUnitPlatform()
            testLogging {
                events 'skipped', 'passed', 'failed'
            }
        }

        tasks.named('check') {
            dependsOn javadoc
        }

        tasks.named('test') {
            finalizedBy jacocoTestReport
        }

        // configuring Errorprone
        apply plugin: 'net.ltgt.errorprone'

        dependencies {
            errorprone 'com.google.errorprone:error_prone_core:2.42.0'
        }

        // configuring Spotbugs
        if (System.env.CI || project.findProperty('applySpotbugs')) {
            apply plugin: 'com.github.spotbugs'

            tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
                // fail build in case a failure was detected
                ignoreFailures = false

                jvmArgs.add '--module-path'
                jvmArgs.add getJvmModulePath()
                jvmArgs.add '--add-modules'
                jvmArgs.add getJvmAdditionalModules()

                excludeFilter = rootProject.file('spotbugs-exclude.xml')

                omitVisitors = [
                    'DontReusePublicIdentifiers',
                ]

                reports {
                    xml.required.set(false)
                    html.required.set(true)
                }

                auxClassPaths.from(configurations.javafx, configurations.jaxb)
            }

            dependencies {
                spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0'
            }
        }

        // configuring Versions plugin
        tasks.withType(com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask).configureEach {
            outputFormatter = 'plain,html'
            gradleReleaseChannel = 'current'

            resolutionStrategy {
                def rejectedQualifierParts = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea']
                componentSelection { rules ->
                    rules.all { ComponentSelection selection ->
                        boolean rejected = rejectedQualifierParts.any { qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }
                    }
                }
            }
        }

        apply plugin: 'com.netflix.nebula.maven-base-publish'
        apply plugin: 'com.netflix.nebula.publish-verification'

        publishing {
            repositories {
                maven {
                    name = 'GitHubPackages'
                    url = uri('https://maven.pkg.github.com/' + System.getenv('GITHUB_REPOSITORY'))
                    credentials {
                        username = System.getenv('GITHUB_ACTOR')
                        password = System.getenv('GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}

if (extensions.findByName('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

tasks.register('createFolders') {
    description = 'Creates the folders for the projects and sourceSets should they not exist.'

    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            logger.lifecycle 'Creating project folder: {}', p.getProjectDir()
            p.getProjectDir().mkdirs()
        }

        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    logger.lifecycle 'Creating source folder: {}', srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}
